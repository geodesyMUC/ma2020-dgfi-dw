function jumps = importfileJumpCSV(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   JUMPSVERSION3 = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   JUMPSVERSION3 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   jumpsversion3 = importfile('jumps_version3.csv', 1, 133);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/08/19 08:46:15

%% Initialize variables.
delimiter = ';';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
try
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
catch ME
    warning('Jump Table not loaded - check file name, formatting or location.')  
    % Return Empty Table
    jumps = table;
    jumps.Station = {''};
    jumps.Date = {NaT};
    jumps.Comment = {''};
    jumps.Earthquake = NaN;
    jumps.HWSW_Change = NaN;
    jumps.Unknown = NaN;
    jumps.Use = NaN;
    
    return
end
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[4,5,6,7]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
if length(dataArray{2}{2}) == 10
    % assume yyyy-MM-dd
    date_format_str = 'yyyy-MM-dd';
elseif length(dataArray{2}{2}) == 19
    % assume yyyy-MM-dd HH:mm:ss
    date_format_str = 'yyyy-MM-dd HH:mm:ss';
end
fprintf('Using "%s" format for import of jump datetimes.\n', date_format_str);
try
    dates{2} = datetime(dataArray{2}, 'Format', date_format_str, 'InputFormat', date_format_str, 'TimeZone', 'UTC');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{2} = cellfun(@(x) x(2:end-1), dataArray{2}, 'UniformOutput', false);
        dates{2} = datetime(dataArray{2}, 'Format', date_format_str, 'InputFormat', date_format_str, 'TimeZone', 'UTC');
    catch
        dates{2} = repmat(datetime([NaN NaN NaN]), size(dataArray{2}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{2});
anyInvalidDates = isnan(dates{2}.Hour) - anyBlankDates;
dates = dates(:,2);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [4,5,6,7]);
rawCellColumns = raw(:, [1,3]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
jumps = table;
jumps.Station = rawCellColumns(:, 1);
jumps.Date = dates{:, 1};
jumps.Comment = rawCellColumns(:, 2);
jumps.Earthquake = cell2mat(rawNumericColumns(:, 1));
jumps.HWSW_Change = cell2mat(rawNumericColumns(:, 2));
jumps.Unknown = cell2mat(rawNumericColumns(:, 3));
jumps.Use = cell2mat(rawNumericColumns(:, 4));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% jumpsversion3.Date=datenum(jumpsversion3.Date);

