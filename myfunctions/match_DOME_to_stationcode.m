function [station_code, station_coords] = match_DOME_to_stationcode(station_dome, transl_file_path)
% transl_file_path = '/home/wallinger/Documents/myMA_data/src_data/PSD_GNSS';
data = importfile(transl_file_path);

match_logical = station_dome == data{:, 'DOMES__'};

if nnz(match_logical) > 1 % warn user
    disp('Error - More than 1 match for specified DOMES ID found!')
    station_code = '';
    return
elseif nnz(match_logical) < 1
    disp('Error - No match for specified DOMES ID found!')
    station_code = '';
    return
end

station_code = char(data{match_logical, 'CODE'});
station_lat = dms2degrees([data{match_logical, 'LA'}, data{match_logical, 'TIT'}, data{match_logical, 'UDE__'}]);
station_lon = dms2degrees([data{match_logical, 'LO'}, data{match_logical, 'NGI'}, data{match_logical, 'TUDE_'}]);
station_coords = [station_lat, station_lon];
end

function output = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   PSDGNSS = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   PSDGNSS = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   PSDGNSS = importfile('PSD_GNSS', 5, 128);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2020/02/04 14:35:50

%% Initialize variables.
if nargin<=2
    startRow = 5;
    endRow = 128;
end

%% Format for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
%	column4: categorical (%C)
%   column5: text (%s)
%	column6: text (%s)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%5s%3s%10s%2C%9s%14s%4f%3f%5f%4f%3f%5f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Remove white space around all cell columns.
dataArray{1} = strtrim(dataArray{1});
dataArray{2} = strtrim(dataArray{2});
dataArray{3} = strtrim(dataArray{3});
dataArray{5} = strtrim(dataArray{5});
dataArray{6} = strtrim(dataArray{6});

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
output = table(dataArray{1:end-1}, 'VariableNames', {'CODE','PT','DOMES__','T','STATION','DESCRIPTION__','LO','NGI','TUDE_','LA','TIT','UDE__','HEIGHT_'});
end